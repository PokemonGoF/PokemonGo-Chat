{"version":3,"file":"/packages/meteor-phonegap-push.js","sources":["meteor-phonegap-push/android.server.js","meteor-phonegap-push/ios.server.js","meteor-phonegap-push/push.server.js"],"names":[],"mappings":";;;;;;;;AAAA,oC;AACA,C;AACA,mC;AACA,0E;AACA,4B;AACA,C;AACA,sC;AACA,8C;AACA,iC;AACA,gC;AACA,iC;AACA,0B;AACA,C;AACA,2E;AACA,8L;AACA,C;AACA,M;AACA,2F;AACA,M;AACA,+D;AACA,2B;AACA,M;AACA,6E;AACA,mE;AACA,2B;AACA,M;;;;;;;;;;;;;;;;;;ACzBA,6B;AACA,+B;AACA,2B;AACA,C;AACA,oF;AACA,mF;;AAEA,0C;;AAEA,qC;AACA,kB;AACA,wC;AACA,sG;AACA,2C;;AAEA,0B;;AAEA,mD;AACA,6C;AACA,2C;AACA,I;AACA,kB;AACA,+I;AACA,+B;AACA,+D;AACA,8D;AACA,iD;AACA,yC;AACA,yC;AACA,yC;AACA,I;AACA,oD;AACA,yC;;;;;;;;;;;;;;;;;;AChCA,E;AACA,oC;AACA,8D;;AAEA,oB;AACA,8C;AACA,G;;AAEA,sB;;;AAGA,mD;AACA,oB;;AAEA,8E;AACA,yE;AACA,kE;AACA,oE;AACA,sF;AACA,sB;;AAEA,gE;AACA,sD;AACA,8D;AACA,0C;;AAEA,4D;AACA,2D;;AAEA,0D;AACA,0D;;;AAGA,oC;;AAEA,uJ;AACA,I;AACA,wC;AACA,gD;AACA,I;AACA,wH;AACA,yE;AACA,uD;;AAEA,iC;;AAEA,sD;AACA,6B;AACA,4E;;AAEA,+D;;AAEA,iD;;AAEA,0C;;AAEA,uF;AACA,2B;AACA,kD;AACA,0B;AACA,8C;AACA,iC;;AAEA,6E;;AAEA,uD;;AAEA,M;;AAEA,uE;AACA,0C;AACA,0C;AACA,S;AACA,0C;AACA,uC;AACA,8B;AACA,mC;AACA,4B;AACA,4D;AACA,mB;AACA,6B;AACA,8B;AACA,6B;AACA,a;AACA,W;AACA,sD;;AAEA,iD;AACA,6E;AACA,W;AACA,Q;AACA,0C;AACA,yC;AACA,uC;AACA,yC;AACA,sC;AACA,iC;AACA,a;AACA,c;AACA,8F;AACA,c;;AAEA,qE;AACA,Q;AACA,oE;AACA,sB;AACA,4E;AACA,oB;AACA,sF;AACA,8D;;AAEA,+D;AACA,0C;AACA,uC;AACA,6B;AACA,wE;AACA,sC;AACA,4B;AACA,yB;;AAEA,4B;AACA,8D;AACA,uF;AACA,mD;AACA,uB;AACA,0H;;AAEA,iB;AACA,sE;AACA,iE;AACA,wD;;AAEA,+D;AACA,0C;AACA,uC;AACA,6B;AACA,sD;AACA,sC;AACA,4B;AACA,yB;;AAEA,4B;AACA,4D;AACA,kD;AACA,uB;AACA,0H;;AAEA,iB;;AAEA,a;AACA,W;AACA,qF;AACA,sE;AACA,iE;AACA,c;AACA,sB;AACA,wB;;AAEA,oC;AACA,qC;;AAEA,+B;AACA,kC;AACA,6B;AACA,gD;AACA,U;;AAEA,yD;AACA,mD;AACA,4C;AACA,+D;AACA,kF;AACA,e;AACA,W;AACA,M;;;AAGA,gB;AACA,E","sourcesContent":["//var gcm = Npm.require('node-gcm');\n \n// var message = new gcm.Message();\n// var sender = new gcm.Sender('AIzaSyCDx8v9R0fMsAsjoAffF-P3FCFWXlvwKgL');\n// var registrationIds = [];\n \n// message.addData('title','My Game');\n// message.addData('message','Your turn!!!!');\n// message.addData('msgcnt','1');\n// message.collapseKey = 'demo';\n// message.delayWhileIdle = true;\n// message.timeToLive = 3;\n \n// // At least one token is required - each app registers a different token\n// registrationIds.push('APA91bFobAwN7P3Okxy2al8RI12VcJFUS-giXWTOoWXIObtSPOE1h7FuH1VPLBPgshDI_Fp7aIYVET-ssvGUErlWYA0cKPGhoXT1daqyDsEfem9ZtgZNRhQFv7kLCIVSigYlpMluToPiSHSsFSEdtCDfKoOZqNPgfs');\n \n// /**\n//  * Parameters: message-literal, registrationIds-array, No. of retries, callback-function\n//  */\n// sender.send(message, registrationIds, 4, function (result) {\n//     console.log(result);\n// });\n// /** Use the following line if you want to send the message without retries\n// sender.sendNoRetry(message, registrationIds, function (result) {\n// console.log(result); });\n// **/","//var http = require('http');\n//var apn = Npm.require('apn');\n//var url = require('url');\n \n// var myPhone = \"d2d8d2a652148a5cea89d827d23eee0d34447722a2e7defe72fe19d733697fb0\";\n// var myiPad = \"51798aaef34f439bbb57d6e668c5c5a780049dae840a0a3626453cd4922bc7ac\";\n\n// var myDevice = new apn.Device(myPhone);\n\n// var note = new apn.Notification();\n// note.badge = 1;\n// note.sound = \"notification-beep.wav\";\n// note.alert = { \"body\" : \"Your turn!\", \"action-loc-key\" : \"Play\" , \"launch-image\" : \"mysplash.png\"};\n// note.payload = {'messageFrom': 'Holly'};\n\n// note.device = myDevice;\n\n// var callback = function(errorNum, notification){\n//     console.log('Error is: %s', errorNum);\n//     console.log(\"Note \" + notification);\n// }\n// var options = {\n//     gateway: 'gateway.sandbox.push.apple.com', // this URL is different for Apple's Production Servers and changes when you go to production\n//     errorCallback: callback,\n//     cert: 'PushNotificationSampleCert.pem',                 \n//     key:  'PushNotificationSampleKey.pem',                 \n//     passphrase: 'myPassword',                 \n//     port: 2195,                       \n//     enhanced: true,                   \n//     cacheLength: 100                  \n// }\n// var apnsConnection = new apn.Connection(options);\n// apnsConnection.sendNotification(note);","/*\n  A general purpose user CordovaPush\n  ios, android, mail, twitter?, facebook?, sms?, snailMail? :)\n\n  Phonegap generic :\n  https://github.com/phonegap-build/PushPlugin\n */\n\n// getText / getBinary\n\n\nCordovaPush = function(androidServerKey, options) {\n    var self = this;\n\n    // This function is called when a token is replaced on a device - normally\n    // this should not happen, but if it does we should take action on it\n    self.replaceToken = (typeof options.onReplace === 'function')?\n                    options.onReplace:function(oldToken, newToken) {\n                        console.log('Replace token: ' + oldToken + ' -- ' + newToken);\n                    };\n\n    self.removeToken = (typeof options.onRemove === 'function')?\n                    options.onRemove:function(token) {\n                        console.log('Remove token: ' + token);\n                    };                    \n\n    if (!options['certData'] || !options['certData'].length)\n        console.log('Push server could not find certData');\n\n    if (!options['keyData'] || !options['keyData'].length)\n        console.log('Push server could not find keyData');\n\n\n    // https://npmjs.org/package/apn\n\n    // After requesting the certificate from Apple, export your private key as a .p12 file and download the .cer file from the iOS Provisioning Portal.\n    \n    // gateway.push.apple.com, port 2195\n    // gateway.sandbox.push.apple.com, port 2195\n    \n    // Now, in the directory containing cert.cer and key.p12 execute the following commands to generate your .pem files:\n    // $ openssl x509 -in cert.cer -inform DER -outform PEM -out cert.pem\n    // $ openssl pkcs12 -in key.p12 -out key.pem -nodes\n\n    var apn = Npm.require('apn');\n\n    var apnConnection = new apn.Connection( options );\n    // (cert.pem and key.pem)\n    self.sendIOS = function(from, userToken, title, text, count, priority) {\n\n        priority = (priority || priority === 0)? priority : 10;\n\n        var myDevice = new apn.Device(userToken);\n\n        var note = new apn.Notification();\n\n        note.expiry = Math.floor(Date.now() / 1000) + 3600; // Expires 1 hour from now.\n        note.badge = count;\n        //note.sound = \"\"; // XXX: Does this work?\n        note.alert = text;\n        note.payload = {'messageFrom': from };\n        note.priority = priority;\n\n        //console.log('I:Send message to: ' + userToken + ' count=' + count);\n\n        apnConnection.pushNotification(note, myDevice);\n\n    };\n\n    self.sendAndroid = function(from, userTokens, title, text, count) {\n        var gcm = Npm.require('node-gcm');\n        var Fiber = Npm.require('fibers');\n         \n        //var message = new gcm.Message();\n        var message = new gcm.Message({\n            collapseKey: from,\n        //    delayWhileIdle: true,\n        //    timeToLive: 4,\n        //    restricted_package_name: 'dk.gi2.driftsstatus'\n            data: {\n                title: title,\n                message: text,\n                msgcnt: count\n            }\n        });\n        var sender = new gcm.Sender(androidServerKey);\n\n        _.each(userTokens, function(value, key) {\n            //console.log('A:Send message to: ' + value + ' count=' + count);\n        });\n        \n        /*message.addData('title', title);\n        message.addData('message', text);\n        message.addData('msgcnt', '1');\n        message.collapseKey = 'sitDrift';\n        message.delayWhileIdle = true;\n        message.timeToLive = 3;*/\n             \n        // /**\n        //  * Parameters: message-literal, userTokens-array, No. of retries, callback-function\n        //  */\n\n        var userToken = (userTokens.length === 1)?userTokens[0]:null;\n        \n        sender.send(message, userTokens, 5, function (err, result) {\n            if (err) {\n                //console.log('ANDROID ERROR: result of sender: ' + result);\n            } else {\n                //console.log('ANDROID: Result of sender: ' + JSON.stringify(result));\n                if (result.canonical_ids === 1 && userToken) {\n\n                    // This is an old device, token is replaced\n                    Fiber(function(self) {\n                        // Run in fiber\n                        try {\n                            self.callback(self.oldToken, self.newToken);\n                        } catch(err) {\n                            \n                        }\n\n                    }).run({\n                        oldToken: { androidToken: userToken },\n                        newToken: { androidToken: result.results[0].registration_id }, \n                        callback: self.replaceToken\n                    });\n                    //self.replaceToken({ androidToken: userToken }, { androidToken: result.results[0].registration_id });\n\n                }\n                // We cant send to that token - might not be registred\n                // ask the user to remove the token from the list\n                if (result.failure !== 0 && userToken) {\n\n                    // This is an old device, token is replaced\n                    Fiber(function(self) {\n                        // Run in fiber\n                        try {\n                            self.callback(self.token);\n                        } catch(err) {\n                            \n                        }\n\n                    }).run({\n                        token: { androidToken: userToken }, \n                        callback: self.removeToken\n                    });\n                    //self.replaceToken({ androidToken: userToken }, { androidToken: result.results[0].registration_id });\n\n                }\n\n            }\n        });\n        // /** Use the following line if you want to send the message without retries\n        // sender.sendNoRetry(message, userTokens, function (result) {\n        //     console.log('ANDROID: ' + JSON.stringify(result));\n        // });\n        // **/        \n    }; // EO sendAndroid\n\n    self.initFeedback = function() {\n        var apn = Npm.require('apn');\n\n        var feedbackOptions = {\n            \"batchFeedback\": true,\n            \"interval\": 1000,\n            'address': 'feedback.push.apple.com'\n        };\n\n        var feedback = new apn.Feedback(feedbackOptions);\n        feedback.on(\"feedback\", function(devices) {\n            devices.forEach(function(item) {\n                // Do something with item.device and item.time;\n                console.log('A:PUSH FEEDBACK ' + item.device + ' - ' + item.time);\n            });\n        });\n    };\n\n\n    return self;\n};\n"]}